receivers:
  # Generate traces from the given topology file (env var: TOPO_FILE)
  generator:
    path: "${TOPO_FILE}"
    inline: "${TOPO_INLINE}"
    api:
      endpoint: 0.0.0.0:9999
      cors_allowed_origins:
        - '*'
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 5s
          static_configs:
            - targets: ['0.0.0.0:8888']
          relabel_configs:
          - replacement: "internal-demo-otel-collector"
            target_label: "service"
            action: replace
               
processors:
  batch:
  spanmetrics:
    metrics_exporter: otlp
    dimensions:
      - name: http.method

exporters:
  logging:
  # Export to Lightstep Public Satellites
  otlp:
    endpoint: "${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}"
    insecure_skip_verify: true
    insecure: "${OTEL_INSECURE}"
    headers:
      "lightstep-access-token": "${LS_ACCESS_TOKEN}"
    sending_queue:
      num_consumers: 20
      queue_size: 10000  
  # export internal metrics to monitoring project  
  otlp/2:
    endpoint: "${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT_INTERNAL}"
    insecure_skip_verify: true
    insecure: "${OTEL_INSECURE}"
    headers:
      "lightstep-access-token": "${LS_ACCESS_TOKEN_INTERNAL}"         

service:
  pipelines:
    metrics:
      receivers:
      - generator
      processors:
      - batch
#     - webhook
      exporters:
      - otlp
      - logging
#pipeline for the collectors own internal metrics      
    metrics/2:
      receivers:
      - prometheus
      exporters:
      - otlp/2
    traces:
      receivers:
      - generator
      processors:
      - spanmetrics
      - batch
      exporters:
      - logging
      - otlp
